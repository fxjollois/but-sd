lignes_Semestre = recherche_pages("Semestre [1-6]", text_split_sans_bas)
lignes_Chapitre = recherche_pages("Chapitre [0-9]", text_split_sans_bas)
lignes_SAE = recherche_pages("[0-9\\.]{3}.*SAÉ [1-6]", text_split_sans_bas)
lignes_RES = recherche_pages("[0-9\\.]{3}.*Ressource R[1-6]", text_split_sans_bas)
lignes_PF = recherche_pages("[0-9\\.]{3}.*PORTFOLIO", text_split_sans_bas)
lignes_Stage = recherche_pages("[0-9\\.]{3}.*STAGE", text_split_sans_bas)
lignes = sort(c(lignes_Semestre, lignes_Chapitre,
lignes_SAE, lignes_RES, lignes_PF,
lignes_Stage, length(text_split_sans_bas)))
nettoyage_chaine = function(chaine) {
trimws(gsub("-", "", gsub("–", "", chaine)))
}
decode_ligne1 = function(ligne1) {
s1 = strsplit(ligne1, ":")[[1]]
nom = trimws(s1[2])
s2 = strsplit(s1[1], " ")[[1]]
type = s2[length(s2) - 1]
code = s2[length(s2)]
semestre = ifelse(type == "Ressource",
as.integer(substr(code, 2, 2)),
as.integer(substr(code, 1, 1)))
list(
type = type,
nom = nom,
code = code,
semestre = semestre,
numero = numero
)
}
decode_AC = function(lignes) {
sapply(strsplit(lignes[grep("AC[0-9]+\\.[0-9]+", lignes)], "\\|"), function(l) {
nettoyage_chaine(l[1])
})
}
decode_R = function(lignes) {
sapply(strsplit(lignes[grep("R[0-9]+\\.[0-9]+", lignes)], "\\|"), function(l) {
nettoyage_chaine(l[1])
})
}
decode_competences_SAE = function(lignes) {
limite = grep("Objectifs et problématique professionnelle", lignes)
return(nettoyage_chaine(lignes[3:(limite-2)]))
}
decode_objectifs = function(lignes) {
debut = grep("Objectifs et problématique professionnelle", lignes)
fin = grep("Descriptif générique", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
decode_descriptif_SAE = function(lignes) {
debut = grep("Descriptif générique", lignes)
fin = grep("Apprentissages critiques", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
SAE_to_liste = function(lignes) {
res = decode_ligne1(lignes[1])
# res$lignes = lignes
res$competences = decode_competences_SAE(lignes)
res$objectifs = decode_objectifs(lignes)
res$descriptif = decode_descriptif_SAE(lignes)
res$AC = decode_AC(lignes)
res$RES = decode_R(lignes)
return(res)
}
# SAE_to_liste(text_split_sans_bas[1214:1251])
SAE_to_liste(text_split_sans_bas[1252:1292])
# SAE_to_liste(text_split_sans_bas[1214:1251])
SAE_to_liste(text_split_sans_bas[1252:1292])
SAE_to_liste(text_split_sans_bas[1214:1251])
decode_ligne1 = function(ligne1) {
s1 = strsplit(ligne1, ":")[[1]]
nom = trimws(s1[2])
s2 = strsplit(s1[1], " ")[[1]]
type = s2[length(s2) - 1]
code = s2[length(s2)]
semestre = ifelse(type == "Ressource",
as.integer(substr(code, 2, 2)),
as.integer(substr(code, 1, 1)))
list(
type = type,
nom = nom,
code = code,
semestre = semestre
)
}
decode_AC = function(lignes) {
sapply(strsplit(lignes[grep("AC[0-9]+\\.[0-9]+", lignes)], "\\|"), function(l) {
nettoyage_chaine(l[1])
})
}
decode_R = function(lignes) {
sapply(strsplit(lignes[grep("R[0-9]+\\.[0-9]+", lignes)], "\\|"), function(l) {
nettoyage_chaine(l[1])
})
}
decode_competences_SAE = function(lignes) {
limite = grep("Objectifs et problématique professionnelle", lignes)
return(nettoyage_chaine(lignes[3:(limite-2)]))
}
decode_objectifs = function(lignes) {
debut = grep("Objectifs et problématique professionnelle", lignes)
fin = grep("Descriptif générique", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
decode_descriptif_SAE = function(lignes) {
debut = grep("Descriptif générique", lignes)
fin = grep("Apprentissages critiques", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
SAE_to_liste = function(lignes) {
res = decode_ligne1(lignes[1])
# res$lignes = lignes
res$competences = decode_competences_SAE(lignes)
res$objectifs = decode_objectifs(lignes)
res$descriptif = decode_descriptif_SAE(lignes)
res$AC = decode_AC(lignes)
res$RES = decode_R(lignes)
return(res)
}
# SAE_to_liste(text_split_sans_bas[1214:1251])
SAE_to_liste(text_split_sans_bas[1252:1292])
decode_competences_RES = function(lignes) {
limite = grep("^SA", lignes)[1]
return(nettoyage_chaine(lignes[3:(limite-2)]))
}
decode_descriptif_RES = function(lignes) {
debut = grep("Descriptif", lignes)
fin = grep("Apprentissages critiques", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
decode_SAE = function(lignes) {
sapply(strsplit(lignes[grep("SA. [0-9]+\\.[0-9]+", lignes)], "\\|"), function(l) {
nettoyage_chaine(l[1])
})
}
RES_to_liste = function(lignes) {
res = decode_ligne1(lignes[1])
res$lignes = lignes
res$competences = decode_competences_RES(lignes)
# res$objectifs = decode_objectifs(lignes)
res$descriptif = decode_descriptif_RES(lignes)
res$AC = decode_AC(lignes)
res$SAE = decode_SAE(lignes)
return(res)
}
SAE = list()
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
SAE
SAE = list()
RES = list()
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
if (lignes[i] %in% lignes_RES) {
RES[[length(RES) + 1]] = REs_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
RES = list()
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
if (lignes[i] %in% lignes_RES) {
RES[[length(RES) + 1]] = RES_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
RES = list()
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
cat("\n\n", rep("*", 50), "\nSAE : ", ligne[i], "\n\n")
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
if (lignes[i] %in% lignes_RES) {
cat("\n\n", rep("*", 50), "\nSAE : ", ligne[i], "\n\n")
RES[[length(RES) + 1]] = RES_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
SAE = list()
RES = list()
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
cat("\n\n", rep("*", 50), "\nSAE : ", lignes[i], "\n\n")
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
if (lignes[i] %in% lignes_RES) {
cat("\n\n", rep("*", 50), "\nSAE : ", lignes[i], "\n\n")
RES[[length(RES) + 1]] = RES_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
for (i in 1:length(lignes)) {
if (lignes[i] %in% lignes_SAE) {
cat("\n\n", rep("*", 50), "\nSAE : ", lignes[i], "\n\n", sep = "")
print(lignes[i+1])
SAE[[length(SAE) + 1]] = SAE_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
if (lignes[i] %in% lignes_RES) {
cat("\n\n", rep("*", 50), "\nSAE : ", lignes[i], "\n\n", sep = "")
print(lignes[i+1])
RES[[length(RES) + 1]] = RES_to_liste(text_split_sans_bas[lignes[i]:(lignes[i+1]-1)])
}
}
SAE_to_liste(text_split_sans_bas[1624:1653])
text_split_sans_bas[1624:1653]
lignes_SAE
source("~/Documents/GitHub/but-sd/create_json_bis.R")
text_split_sans_bas[1624:1653]
decode_ligne1(text_split_sans_bas[1624])
decode_competences_RES(text_split_sans_bas[1624:1653])
decode_descriptif_RES(text_split_sans_bas[1624:1653])
text_split_sans_bas[1624:1653]
source("~/Documents/GitHub/but-sd/create_json_bis.R")
SAE
RES
text_split_sans_bas[1:50]
text_split_sans_bas[100:200]
text_split[150:250]
text_split[350:450]
grep("CE[0-9]+.[0-9]+", text_split_sans_bas)
text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
trimws(text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)])
text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
grep("CE[0-9]+.[0-9]+", text_split_sans_bas)
RES
####################
# Composantes essentielles
CE = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE
strsplit(CE, " - ")
sapply(strsplit(CE, " - "), function(e) { e[length(e)-1] })
sapply(strsplit(CE, " - "), function(e) { e[length(e)] })
length(CE)
####################
# Composantes essentielles
CE = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
length(CE)
####################
# Composantes essentielles
CE = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE = sapply(strsplit(CE[1:(length(CE)/2)], " - "), function(e) { e[length(e)] })
CE
strsplit(CE, " | ")
CE = sapply(strsplit(CE[1:(length(CE)/2)], "-"), function(e) { trimws(e[length(e)]) })
####################
# Composantes essentielles
CE = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE = sapply(strsplit(CE[1:(length(CE)/2)], "-"), function(e) { trimws(e[length(e)]) })
strsplit(CE, "|")
strsplit(CE, "\|")
strsplit(CE, "\\|")
sapply(strsplit(CE, "\\|", trimws)
)
sapply(strsplit(CE, "\\|"), trimws)
CE = sapply(strsplit(CE, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
})
####################
# Composantes essentielles
CE_temp = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE_temp = sapply(strsplit(CE[1:(length(CE)/2)], "-"), function(e) { trimws(e[length(e)]) })
CE = sapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
})
CE
CE = sapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
list(
code = code,
competence = competence
)
})
CE
CE = lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
list(
code = code,
competence = competence
)
})
CE
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
list(
origine = e,
code = code,
competence = competence
)
})
strsplit(CE_temp, "\\|")
####################
# Composantes essentielles
CE_temp = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE_temp = sapply(strsplit(CE[1:(length(CE_temp)/2)], "-"), function(e) { trimws(e[length(e)]) })
####################
# Composantes essentielles
CE_temp = text_split_sans_bas[grep("CE[0-9]+.[0-9]+", text_split_sans_bas)]
CE_temp = sapply(strsplit(CE_temp[1:(length(CE_temp)/2)], "-"), function(e) { trimws(e[length(e)]) })
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 4)
list(
origine = e,
code = code,
competence = competence
)
})
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 3)
list(
origine = e,
code = code,
competence = competence
)
})
lapply(strsplit(CE_temp, "\\|"), function(e, i) {
code = trimws(e[1])
competence = substr(e[1], 3, 3)
if (competence == 4) {
print(i)
}
list(
origine = e,
essai = i,
code = code,
competence = competence
)
})
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 3)
list(
origine = e,
code = code,
competence = competence
)
})
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 3)
list(
origine = e,
code = code,
competence = competence,
libelle = nettoyage_chaine(e[2])
)
})
lapply(strsplit(CE_temp, "\\|"), function(e) {
code = trimws(e[1])
competence = substr(e[1], 3, 3)
list(
code = code,
competence = competence,
libelle = nettoyage_chaine(e[2])
)
})
grep("Les compétences et les composantes essentielles", text_split_sans_bas)
grep("Les compétences et les composantes", text_split_sans_bas)
text_split_sans_bas[grep("Les compétences et les composantes", text_split_sans_bas)]
################################################################################
# Compétences
# VCOD : 346
text_split_sans_bas[346:676]
################################################################################
# Compétences
fromJSON("but-sd--a-la-main.json")
################################################################################
# Compétences
fromJSON("but-sd--a-la-main.json")
################################################################################
# Compétences
fromJSON("but-sd--a-la-main.json")
################################################################################
# Compétences
fromJSON("but-sd--a-la-main.json")
?fromJSON
################################################################################
# Compétences
fromJSON("but-sd--a-la-main.json", simplifyVector = FALSE)
################################################################################
# Compétences
but = fromJSON("but-sd--a-la-main.json", simplifyVector = FALSE)
but$SAE = SAE
but$RES = RES
write_json(but, path = "but-sd-bis.json", auto_unbox = TRUE, pretty = TRUE)
source("~/Documents/GitHub/but-sd/create_json_bis.R")
RES[[1]]$descriptif
text_split_sans_bas[1479:1513]
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)
fin = grep("Volume horaire", lignes)
paste(lignes[debut:(fin-1)], collapse = "\n")
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)
fin = grep("Volume horaire", lignes)
paste(lignes[(debut+1):(fin-1)], collapse = "\n")
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)
fin = grep("Volume horaire", lignes)
paste(lignes[(debut+1):(fin-1)], collapse = "\n")
}
decode_motscles(text_split_sans_bas[1479:1513])
text_split_sans_bas[1479:1513]
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)
fin = grep("Volume horaire", lignes)
nettoyage_chaine(lignes[(debut+1):(fin-1)])
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)
fin = grep("Volume horaire", lignes)
print(debut)
print(fin)
nettoyage_chaine(lignes[(debut+1):(fin-1)])
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
print(debut)
print(fin)
nettoyage_chaine(lignes[(debut+1):(fin-1)])
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
nettoyage_chaine(lignes[(debut+1):(fin-1)])
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
nettoyage_chaine(lignes[(debut+1):(fin-1)])
}
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
lignes[(debut+1):(fin-1)]
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
Filter(lignes[(debut+1):(fin-1)], is.na)
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
Filter(is.na, lignes[(debut+1):(fin-1)])
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
strsplit(lignes[(debut+1):(fin-1)]), "-")
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
strsplit(lignes[(debut+1):(fin-1)], "-")
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
res = unlist(strsplit(lignes[(debut+1):(fin-1)], "-"))
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
res = unlist(strsplit(lignes[(debut+1):(fin-1)], "-"))
res
}
decode_motscles(text_split_sans_bas[1479:1513])
decode_motscles = function(lignes) {
debut = grep("Mots clés", lignes)[1]
fin = grep("Volume horaire", lignes)[1]
res = unlist(strsplit(lignes[(debut+1):(fin-1)], "-"))
nettoyage_chaine(res)
}
decode_motscles(text_split_sans_bas[1479:1513])
text_split_sans_bas[1479:1513]
cat(text_split_sans_bas[1479:1513])
cat(text_split_sans_bas[1479:1513], collapes = "\n")
cat(text_split_sans_bas[1479:1513], collapse = "\n")
cat(text_split_sans_bas[1479:1513], sep = "\n")
text_split_sans_bas[1252:1292]
source("~/Documents/GitHub/but-sd/create_json_bis.R")
source("~/Documents/GitHub/but-sd/create_json_bis.R")
a = "Descriptif :\nL’objectif de cette ressource est de communiquer de manière responsable et éthique en entreprise\nContenus :\n    – Responsabilité Sociale et Environnementale des entreprises : études des bilans RSE des entreprises, confrontation avec\n      la communication publicitaire, confrontation avec les discours sociaux et médiatiques\n    – Analyse d’un plan de communication en rapport avec les enjeux éthiques et déontologiques : définir et comprendre la\n      stratégie de communication d’entreprise.\n    – Argumentation sur l’utilisation éthique des données : réfléchir sur les notions\n    – Connaissance des modélisations des techniques de Communication (USA, Japon..) : méthode lean (principes, dé-\n      marches, mise en place), méthode agile, Scrum, approche collaborative, coworking...\n    - Communication dans un cadre juridique. RGPD, charte déontologique\n\nLa communication doit s’intégrer dans une stratégie plus générale de l’entreprise, prenant en considération les enjeux déonto-\nlogiques et adoptant une approche plus responsable. Des méthodes de communication nouvelles sont introduites pour une plus\ngrande maîtrise de sa communication. L’étudiant améliore sa compréhension de l’environnement de l’entreprise pour adapter\nson discours à son interlocuteur."
cat(a)
gsub("-\n.*", "", a)
cat(gsub("-\n.*", "", a))
cat(gsub("-\n *", "", a))
cat(a)
cat(gsub("-\n *", "", a))
